// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nltk_service.proto

package nltk_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a9e7ef5ad75fe2, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Response struct {
	Keywords             []string `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a9e7ef5ad75fe2, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
}

func init() { proto.RegisterFile("nltk_service.proto", fileDescriptor_27a9e7ef5ad75fe2) }

var fileDescriptor_27a9e7ef5ad75fe2 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xcb, 0x29, 0xc9,
	0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92,
	0xe5, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x29, 0x49, 0xad,
	0x28, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xd4, 0xb8, 0x38, 0x82, 0x52,
	0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xa4, 0xb8, 0x38, 0xb2, 0x53, 0x2b, 0xcb, 0xf3, 0x8b,
	0x52, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x23, 0x33, 0x2e, 0x3e, 0x6f,
	0x08, 0x3b, 0x18, 0x62, 0xbc, 0x90, 0x0a, 0x17, 0xb7, 0x7b, 0x6a, 0x09, 0x54, 0xb0, 0x58, 0x88,
	0x43, 0x0f, 0x6a, 0x8d, 0x14, 0xa7, 0x1e, 0xcc, 0x44, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x2b, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xf2, 0x3f, 0x57, 0x9b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeywordServiceClient is the client API for KeywordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeywordServiceClient interface {
	GetKeywords(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type keywordServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeywordServiceClient(cc *grpc.ClientConn) KeywordServiceClient {
	return &keywordServiceClient{cc}
}

func (c *keywordServiceClient) GetKeywords(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/KeywordService/GetKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeywordServiceServer is the server API for KeywordService service.
type KeywordServiceServer interface {
	GetKeywords(context.Context, *Request) (*Response, error)
}

// UnimplementedKeywordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeywordServiceServer struct {
}

func (*UnimplementedKeywordServiceServer) GetKeywords(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeywords not implemented")
}

func RegisterKeywordServiceServer(s *grpc.Server, srv KeywordServiceServer) {
	s.RegisterService(&_KeywordService_serviceDesc, srv)
}

func _KeywordService_GetKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordServiceServer).GetKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeywordService/GetKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordServiceServer).GetKeywords(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeywordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KeywordService",
	HandlerType: (*KeywordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeywords",
			Handler:    _KeywordService_GetKeywords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nltk_service.proto",
}
